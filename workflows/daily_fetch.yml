name: Daily Stock Data Fetch

on:
  schedule:
    # 每日 15:30 執行（UTC+8 = UTC+0 + 8，所以 15:30 = 07:30 UTC）
    - cron: '30 7 * * 1-5'  # 週一至週五 15:30 (台北時間)
  
  # 允許手動觸發
  workflow_dispatch:

env:
  TZ: Asia/Taipei

jobs:
  fetch-stock-data:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary requests pandas numpy beautifulsoup4 lxml flask flask-cors
    
    - name: Fetch stock data and sync to Neon
      env:
        NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
      run: |
        python3 << 'PYTHON_SCRIPT'
        import os
        import sys
        import time
        import requests
        import psycopg2
        from psycopg2.extras import execute_values, RealDictCursor
        from datetime import datetime, date, timedelta
        import json
        from bs4 import BeautifulSoup
        import pandas as pd
        
        print("=" * 80)
        print("🚀 開始執行 GitHub Actions 股價資料抓取任務")
        print("=" * 80)
        print(f"⏰ 執行時間：{datetime.now()}")
        print(f"📅 目標日期：{date.today()}")
        print()
        
        # 連接 Neon 資料庫
        NEON_DB_URL = os.environ.get('NEON_DATABASE_URL')
        
        if not NEON_DB_URL:
            print("❌ 錯誤：未設定 NEON_DATABASE_URL")
            print("請在 GitHub Settings → Secrets 中設定 NEON_DATABASE_URL")
            sys.exit(1)
        
        try:
            conn = psycopg2.connect(NEON_DB_URL)
            cur = conn.cursor()
            print("✅ 已連接到 Neon 資料庫")
            print()
            
        except Exception as e:
            print(f"❌ 資料庫連線失敗：{e}")
            sys.exit(1)
        
        # ========================================
        # 函數：抓取上市股票資料 (TWSE)
        # ========================================
        def fetch_twse_data(target_date):
            """抓取上市股票資料"""
            print("📊 開始抓取上市股票資料 (TWSE)...")
            
            date_str = target_date.strftime('%Y%m%d')
            url = f'https://www.twse.com.tw/exchangeReport/MI_INDEX?response=json&date={date_str}&type=ALLBUT0999'
            
            try:
                response = requests.get(url, timeout=30)
                response.raise_for_status()
                data = response.json()
                
                if data.get('stat') != 'OK':
                    print(f"⚠️  上市股票資料尚未公布或非交易日")
                    return []
                
                records = []
                for row in data.get('data9', []):
                    try:
                        symbol = row[0].strip()
                        if not symbol.isdigit():
                            continue
                        
                        # 解析價格資料
                        open_price = float(row[5].replace(',', '')) if row[5] != '--' else None
                        high_price = float(row[6].replace(',', '')) if row[6] != '--' else None
                        low_price = float(row[7].replace(',', '')) if row[7] != '--' else None
                        close_price = float(row[8].replace(',', '')) if row[8] != '--' else None
                        volume = int(row[2].replace(',', '')) if row[2] != '--' else 0
                        transaction_count = int(row[3].replace(',', '')) if row[3] != '--' else 0
                        
                        if close_price:
                            records.append((
                                symbol, target_date, open_price, high_price,
                                low_price, close_price, volume, transaction_count
                            ))
                    except (ValueError, IndexError) as e:
                        continue
                
                print(f"✅ 上市股票：成功抓取 {len(records)} 筆資料")
                return records
                
            except Exception as e:
                print(f"❌ 抓取上市股票資料失敗：{e}")
                return []
        
        # ========================================
        # 函數：抓取上櫃股票資料 (TPEX)
        # ========================================
        def fetch_tpex_data(target_date):
            """抓取上櫃股票資料"""
            print("📊 開始抓取上櫃股票資料 (TPEX)...")
            
            # 轉換日期格式為民國年
            year = target_date.year - 1911
            month = target_date.month
            day = target_date.day
            date_str = f'{year}/{month:02d}/{day:02d}'
            
            url = f'https://www.tpex.org.tw/web/stock/aftertrading/otc_quotes_no1430/stk_wn1430_result.php?l=zh-tw&d={date_str}&se=AL'
            
            try:
                response = requests.get(url, timeout=30)
                response.raise_for_status()
                data = response.json()
                
                if data.get('aaData') is None:
                    print(f"⚠️  上櫃股票資料尚未公布或非交易日")
                    return []
                
                records = []
                for row in data.get('aaData', []):
                    try:
                        symbol = row[0].strip()
                        if not symbol.isdigit():
                            continue
                        
                        close_price = float(row[2].replace(',', '')) if row[2] != '-' else None
                        open_price = float(row[4].replace(',', '')) if row[4] != '-' else None
                        high_price = float(row[5].replace(',', '')) if row[5] != '-' else None
                        low_price = float(row[6].replace(',', '')) if row[6] != '-' else None
                        volume = int(row[7].replace(',', '')) * 1000 if row[7] != '-' else 0
                        
                        if close_price:
                            records.append((
                                symbol, target_date, open_price, high_price,
                                low_price, close_price, volume, 0
                            ))
                    except (ValueError, IndexError) as e:
                        continue
                
                print(f"✅ 上櫃股票：成功抓取 {len(records)} 筆資料")
                return records
                
            except Exception as e:
                print(f"❌ 抓取上櫃股票資料失敗：{e}")
                return []
        
        # ========================================
        # 主要執行流程
        # ========================================
        try:
            today = date.today()
            
            # 1. 抓取上市股票資料
            twse_records = fetch_twse_data(today)
            time.sleep(3)  # 避免請求過快
            
            # 2. 抓取上櫃股票資料
            tpex_records = fetch_tpex_data(today)
            
            # 3. 合併資料
            all_records = twse_records + tpex_records
            
            if not all_records:
                print("⚠️  今日無資料可同步（可能是非交易日或資料尚未公布）")
                print("✅ 任務完成（無資料更新）")
                sys.exit(0)
            
            print()
            print(f"📦 準備同步 {len(all_records)} 筆資料到 Neon 資料庫...")
            
            # 4. 批次插入到 Neon 資料庫
            execute_values(
                cur,
                """
                INSERT INTO stock_prices 
                (symbol, date, open_price, high_price, low_price, 
                 close_price, volume, transaction_count)
                VALUES %s
                ON CONFLICT (symbol, date) 
                DO UPDATE SET
                    open_price = EXCLUDED.open_price,
                    high_price = EXCLUDED.high_price,
                    low_price = EXCLUDED.low_price,
                    close_price = EXCLUDED.close_price,
                    volume = EXCLUDED.volume,
                    transaction_count = EXCLUDED.transaction_count
                """,
                all_records
            )
            
            conn.commit()
            
            print(f"✅ 成功同步 {len(all_records)} 筆資料到 Neon")
            print()
            print("=" * 80)
            print("🎉 GitHub Actions 任務執行完成！")
            print("=" * 80)
            
        except Exception as e:
            print(f"❌ 執行過程發生錯誤：{e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
            
        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()
        PYTHON_SCRIPT
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: fetch-logs-${{ github.run_number }}
        path: |
          *.log
        retention-days: 30
    
    - name: Send notification on failure
      if: failure()
      run: |
        echo "❌ 資料抓取失敗，請檢查日誌"
        echo "Run ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
