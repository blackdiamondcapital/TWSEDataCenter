name: Daily Stock Data Fetch

on:
  schedule:
    # 每日 16:00 執行（UTC+8 = UTC+0 + 8，所以 16:00 = 08:00 UTC）
    - cron: '0 8 * * 1-5'  # 週一至週五 16:00 (台北時間)
  
  # 允許手動觸發
  workflow_dispatch:

env:
  TZ: Asia/Taipei

jobs:
  fetch-stock-data:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 使用 10 併發，預計 10 分鐘內完成
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary requests beautifulsoup4 lxml
    
    - name: Fetch stock data and sync to Neon
      env:
        NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
      run: |
        python3 << 'PYTHON_SCRIPT'
        import os
        import sys
        import time
        import requests
        import psycopg2
        from psycopg2.extras import execute_values
        from datetime import datetime, date, timedelta
        from bs4 import BeautifulSoup
        from concurrent.futures import ThreadPoolExecutor, as_completed
        import threading
        
        print("=" * 80)
        print("🚀 開始執行 GitHub Actions 股價資料抓取任務")
        print("=" * 80)
        print(f"⏰ 執行時間：{datetime.now()}")
        print(f"📅 目標日期：{date.today()}")
        print()
        
        # 連接 Neon 資料庫
        NEON_DB_URL = os.environ.get('NEON_DATABASE_URL')
        
        if not NEON_DB_URL:
            print("❌ 錯誤：未設定 NEON_DATABASE_URL")
            print("請在 GitHub Settings → Secrets 中設定 NEON_DATABASE_URL")
            sys.exit(1)
        
        try:
            conn = psycopg2.connect(NEON_DB_URL)
            cur = conn.cursor()
            print("✅ 已連接到 Neon 資料庫")
            print()
            
        except Exception as e:
            print(f"❌ 資料庫連線失敗：{e}")
            sys.exit(1)
        
        # ========================================
        # 函數：取得股票清單
        # ========================================
        def get_stock_symbols():
            """取得上市上櫃股票清單"""
            print("📋 取得股票清單...")
            headers = {'User-Agent': 'Mozilla/5.0'}
            
            # 取得上市股票
            twse_symbols = []
            try:
                url = 'https://isin.twse.com.tw/isin/C_public.jsp?strMode=2'
                response = requests.get(url, headers=headers, timeout=30)
                response.encoding = 'big5'
                soup = BeautifulSoup(response.text, 'html.parser')
                
                for row in soup.find_all('tr'):
                    cols = row.find_all('td')
                    if len(cols) >= 5:
                        code_name = cols[0].text.strip()
                        if '\u3000' in code_name:
                            parts = code_name.split('\u3000')
                            if len(parts) == 2 and parts[0].isdigit() and len(parts[0]) == 4:
                                twse_symbols.append(parts[0])
                print(f"✅ 上市股票：{len(twse_symbols)} 檔")
            except Exception as e:
                print(f"⚠️  無法取得上市清單: {e}")
            
            # 取得上櫃股票  
            tpex_symbols = []
            try:
                url = 'https://isin.twse.com.tw/isin/C_public.jsp?strMode=4'
                response = requests.get(url, headers=headers, timeout=30)
                response.encoding = 'big5'
                soup = BeautifulSoup(response.text, 'html.parser')
                
                for row in soup.find_all('tr'):
                    cols = row.find_all('td')
                    if len(cols) >= 5:
                        code_name = cols[0].text.strip()
                        if '\u3000' in code_name:
                            parts = code_name.split('\u3000')
                            if len(parts) == 2 and parts[0].isdigit():
                                tpex_symbols.append(parts[0])
                print(f"✅ 上櫃股票：{len(tpex_symbols)} 檔")
            except Exception as e:
                print(f"⚠️  無法取得上櫃清單: {e}")
            
            return twse_symbols, tpex_symbols
        
        # ========================================
        # 函數：抓取單檔股票資料
        # ========================================
        def fetch_stock_month_data(symbol, target_date, is_twse=True):
            """抓取單檔股票當月資料"""
            year = target_date.year
            month = target_date.month
            
            url = 'https://www.twse.com.tw/exchangeReport/STOCK_DAY'
            params = {
                'response': 'json',
                'date': f'{year}{month:02d}01',
                'stockNo': symbol
            }
            
            headers = {'User-Agent': 'Mozilla/5.0'}
            
            try:
                response = requests.get(url, params=params, headers=headers, timeout=10)
                if response.status_code != 200:
                    return None
                
                data = response.json()
                if data.get('stat') == 'OK' and data.get('data'):
                    for row in data['data']:
                        try:
                            # 解析日期
                            date_parts = row[0].split('/')
                            if len(date_parts) == 3:
                                year_roc = int(date_parts[0]) + 1911
                                month_val = int(date_parts[1])
                                day_val = int(date_parts[2])
                                trade_date = date(year_roc, month_val, day_val)
                                
                                # 只取目標日期
                                if trade_date == target_date:
                                    volume = int(row[1].replace(',', '')) if row[1] != '--' else 0
                                    open_price = float(row[3].replace(',', '')) if row[3] != '--' else None
                                    high_price = float(row[4].replace(',', '')) if row[4] != '--' else None
                                    low_price = float(row[5].replace(',', '')) if row[5] != '--' else None
                                    close_price = float(row[6].replace(',', '')) if row[6] != '--' else None
                                    transaction_count = int(row[8].replace(',', '')) if len(row) > 8 and row[8] != '--' else 0
                                    
                                    if close_price and 0 < close_price < 30000:
                                        return (symbol, target_date, open_price, high_price,
                                                low_price, close_price, volume, transaction_count)
                        except (ValueError, IndexError):
                            continue
            except:
                pass
            
            return None
        
        # ========================================
        # 主要執行流程
        # ========================================
        try:
            today = date.today()
            
            # 1. 取得股票清單
            twse_symbols, tpex_symbols = get_stock_symbols()
            total_symbols = len(twse_symbols) + len(tpex_symbols)
            
            if total_symbols == 0:
                print("❌ 無法取得股票清單")
                sys.exit(1)
            
            print(f"\n📊 準備抓取 {total_symbols} 檔股票資料")
            print(f"   上市：{len(twse_symbols)} 檔")
            print(f"   上櫃：{len(tpex_symbols)} 檔")
            print()
            
            # 2. 使用併發抓取加速（10 個併發）
            all_records = []
            lock = threading.Lock()
            
            def fetch_and_collect(symbol, is_twse):
                """併發抓取單檔股票"""
                result = fetch_stock_month_data(symbol, today, is_twse)
                if result:
                    with lock:
                        all_records.append(result)
                time.sleep(0.3)  # 減少延遲，因為有併發控制
                return result is not None
            
            print("📥 使用併發抓取上市股票（10 併發）...")
            success_count = 0
            with ThreadPoolExecutor(max_workers=10) as executor:
                futures = {executor.submit(fetch_and_collect, symbol, True): symbol 
                          for symbol in twse_symbols}
                
                for i, future in enumerate(as_completed(futures), 1):
                    if future.result():
                        success_count += 1
                    
                    # 每100檔顯示進度
                    if i % 100 == 0:
                        print(f"  進度: {i}/{len(twse_symbols)}, 成功: {success_count}")
            
            print(f"✅ 上市股票完成：{success_count} / {len(twse_symbols)} 檔")
            
            twse_count = success_count
            success_count = 0
            
            print("\n📥 使用併發抓取上櫃股票（10 併發）...")
            with ThreadPoolExecutor(max_workers=10) as executor:
                futures = {executor.submit(fetch_and_collect, symbol, False): symbol 
                          for symbol in tpex_symbols}
                
                for i, future in enumerate(as_completed(futures), 1):
                    if future.result():
                        success_count += 1
                    
                    # 每100檔顯示進度
                    if i % 100 == 0:
                        print(f"  進度: {i}/{len(tpex_symbols)}, 成功: {success_count}")
            
            print(f"✅ 上櫃股票完成：{success_count} / {len(tpex_symbols)} 檔")
            print(f"\n📦 總計抓取：{len(all_records)} 筆資料")
            
            # 3. 檢查是否有資料
            all_records = all_records
            
            if not all_records:
                print("⚠️  今日無資料可同步（可能是非交易日或資料尚未公布）")
                print("✅ 任務完成（無資料更新）")
                sys.exit(0)
            
            print()
            print(f"📦 準備同步 {len(all_records)} 筆資料到 Neon 資料庫...")
            
            # 4. 批次插入到 Neon 資料庫
            execute_values(
                cur,
                """
                INSERT INTO stock_prices 
                (symbol, date, open_price, high_price, low_price, 
                 close_price, volume, transaction_count)
                VALUES %s
                ON CONFLICT (symbol, date) 
                DO UPDATE SET
                    open_price = EXCLUDED.open_price,
                    high_price = EXCLUDED.high_price,
                    low_price = EXCLUDED.low_price,
                    close_price = EXCLUDED.close_price,
                    volume = EXCLUDED.volume,
                    transaction_count = EXCLUDED.transaction_count
                """,
                all_records
            )
            
            conn.commit()
            
            print(f"✅ 成功同步 {len(all_records)} 筆資料到 Neon")
            print()
            print("=" * 80)
            print("🎉 GitHub Actions 任務執行完成！")
            print("=" * 80)
            
        except Exception as e:
            print(f"❌ 執行過程發生錯誤：{e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
            
        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()
        PYTHON_SCRIPT
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: fetch-logs-${{ github.run_number }}
        path: |
          *.log
        retention-days: 30
    
    - name: Send notification on failure
      if: failure()
      run: |
        echo "❌ 資料抓取失敗，請檢查日誌"
        echo "Run ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
