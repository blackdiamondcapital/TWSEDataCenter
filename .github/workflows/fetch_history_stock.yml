name: Fetch Historical Data Range

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: '開始日期 (YYYY-MM-DD)'
        required: true
        default: '2025-10-01'
      end_date:
        description: '結束日期 (YYYY-MM-DD)'
        required: true
        default: '2025-10-25'

env:
  TZ: Asia/Taipei

jobs:
  test-fetch:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 支援日期範圍抓取，需要更多時間
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary requests pandas numpy beautifulsoup4 lxml
    
    - name: Fetch historical data
      env:
        NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
        START_DATE: ${{ github.event.inputs.start_date }}
        END_DATE: ${{ github.event.inputs.end_date }}
      run: |
        python3 << 'PYTHON_SCRIPT'
        import os
        import sys
        import time
        import requests
        import psycopg2
        from psycopg2.extras import execute_values
        from datetime import datetime, date, timedelta
        from bs4 import BeautifulSoup
        from concurrent.futures import ThreadPoolExecutor, as_completed
        import threading
        
        print("=" * 80, flush=True)
        print("🧪 批次抓取歷史資料", flush=True)
        print("=" * 80, flush=True)
        
        start_date_str = os.environ.get('START_DATE')
        end_date_str = os.environ.get('END_DATE')
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
        
        print(f"📅 日期範圍：{start_date} 至 {end_date}", flush=True)
        print(f"⏰ 執行時間：{datetime.now()}", flush=True)
        
        # 計算日期範圍
        date_range = []
        current = start_date
        while current <= end_date:
            date_range.append(current)
            current += timedelta(days=1)
        
        print(f"📆 共 {len(date_range)} 天", flush=True)
        print(flush=True)
        
        NEON_DB_URL = os.environ.get('NEON_DATABASE_URL')
        
        if not NEON_DB_URL:
            print("❌ 錯誤：未設定 NEON_DATABASE_URL")
            sys.exit(1)
        
        try:
            conn = psycopg2.connect(NEON_DB_URL)
            cur = conn.cursor()
            print("✅ 已連接到 Neon 資料庫", flush=True)
            print(flush=True)
        except Exception as e:
            print(f"❌ 資料庫連線失敗：{e}")
            sys.exit(1)
        
        # 取得股票清單
        def get_stock_symbols():
            """取得上市上櫃股票清單"""
            print("📋 取得股票清單...", flush=True)
            headers = {'User-Agent': 'Mozilla/5.0'}
            
            # 取得上市股票
            twse_symbols = []
            try:
                url = 'https://isin.twse.com.tw/isin/C_public.jsp?strMode=2'
                response = requests.get(url, headers=headers, timeout=30)
                response.encoding = 'big5'
                soup = BeautifulSoup(response.text, 'html.parser')
                
                for row in soup.find_all('tr'):
                    cols = row.find_all('td')
                    if len(cols) >= 5:
                        code_name = cols[0].text.strip()
                        if '\u3000' in code_name:
                            parts = code_name.split('\u3000')
                            if len(parts) == 2 and parts[0].isdigit() and len(parts[0]) == 4:
                                twse_symbols.append(parts[0])
                print(f"✅ 上市股票：{len(twse_symbols)} 檔", flush=True)
            except Exception as e:
                print(f"⚠️  無法取得上市清單: {e}")
            
            # 取得上櫃股票  
            tpex_symbols = []
            try:
                url = 'https://isin.twse.com.tw/isin/C_public.jsp?strMode=4'
                response = requests.get(url, headers=headers, timeout=30)
                response.encoding = 'big5'
                soup = BeautifulSoup(response.text, 'html.parser')
                
                for row in soup.find_all('tr'):
                    cols = row.find_all('td')
                    if len(cols) >= 5:
                        code_name = cols[0].text.strip()
                        security_type = cols[1].text.strip() if len(cols) > 1 else ''
                        
                        # 只取股票，排除 ETF、權證等
                        if '\u3000' in code_name and '股票' in security_type:
                            parts = code_name.split('\u3000')
                            if len(parts) == 2 and parts[0].isdigit() and len(parts[0]) == 4:
                                tpex_symbols.append(parts[0])
                print(f"✅ 上櫃股票：{len(tpex_symbols)} 檔", flush=True)
            except Exception as e:
                print(f"⚠️  無法取得上櫃清單: {e}")
            
            return twse_symbols, tpex_symbols
        
        # 抓取單檔股票在日期範圍內的資料
        def fetch_stock_range_data(symbol, target_dates):
            """抓取單檔股票在指定日期範圍內的資料"""
            headers = {'User-Agent': 'Mozilla/5.0'}
            results = []
            
            # 按月份分組日期
            months_to_fetch = {}
            for d in target_dates:
                month_key = (d.year, d.month)
                if month_key not in months_to_fetch:
                    months_to_fetch[month_key] = []
                months_to_fetch[month_key].append(d)
            
            # 逐月抓取
            for (year, month), dates in months_to_fetch.items():
                try:
                    url = 'https://www.twse.com.tw/exchangeReport/STOCK_DAY'
                    params = {
                        'response': 'json',
                        'date': f'{year}{month:02d}01',
                        'stockNo': symbol
                    }
                    
                    response = requests.get(url, params=params, headers=headers, timeout=10)
                    if response.status_code != 200:
                        continue
                    
                    data = response.json()
                    if data.get('stat') == 'OK' and data.get('data'):
                        for row in data['data']:
                            try:
                                # 解析日期
                                date_parts = row[0].split('/')
                                if len(date_parts) == 3:
                                    year_roc = int(date_parts[0]) + 1911
                                    month_val = int(date_parts[1])
                                    day_val = int(date_parts[2])
                                    trade_date = date(year_roc, month_val, day_val)
                                    
                                    # 只取目標日期範圍內的資料
                                    if trade_date in dates:
                                        volume = int(row[1].replace(',', '')) if row[1] != '--' else 0
                                        open_price = float(row[3].replace(',', '')) if row[3] != '--' else None
                                        high_price = float(row[4].replace(',', '')) if row[4] != '--' else None
                                        low_price = float(row[5].replace(',', '')) if row[5] != '--' else None
                                        close_price = float(row[6].replace(',', '')) if row[6] != '--' else None
                                        transaction_count = int(row[8].replace(',', '')) if len(row) > 8 and row[8] != '--' else 0
                                        
                                        if close_price and 0 < close_price < 30000:
                                            results.append((
                                                symbol, trade_date, open_price, high_price,
                                                low_price, close_price, volume, transaction_count
                                            ))
                            except (ValueError, IndexError):
                                continue
                    
                    time.sleep(0.3)
                    
                except:
                    pass
            
            return results
        
        try:
            # 1. 取得股票清單
            twse_symbols, tpex_symbols = get_stock_symbols()
            all_symbols = twse_symbols + tpex_symbols
            
            if not all_symbols:
                print("❌ 無法取得股票清單")
                sys.exit(1)
            
            print(f"\n📊 準備抓取 {len(all_symbols)} 檔股票，共 {len(date_range)} 天", flush=True)
            print(flush=True)
            
            # 2. 使用併發抓取
            all_records = []
            lock = threading.Lock()
            
            def fetch_and_collect(symbol):
                """併發抓取單檔股票"""
                results = fetch_stock_range_data(symbol, date_range)
                if results:
                    with lock:
                        all_records.extend(results)
                return len(results)
            
            print("📥 使用併發抓取（10 併發）...", flush=True)
            success_stocks = 0
            total_records = 0
            
            with ThreadPoolExecutor(max_workers=10) as executor:
                futures = {executor.submit(fetch_and_collect, symbol): symbol 
                          for symbol in all_symbols}
                
                for i, future in enumerate(as_completed(futures), 1):
                    count = future.result()
                    if count > 0:
                        success_stocks += 1
                        total_records += count
                    
                    # 每100檔顯示進度
                    if i % 100 == 0:
                        print(f"  進度: {i}/{len(all_symbols)}, 成功: {success_stocks} 檔, 資料: {total_records} 筆", flush=True)
            
            print(f"\n✅ 完成：{success_stocks} / {len(all_symbols)} 檔", flush=True)
            print(f"📦 總計抓取：{len(all_records)} 筆資料", flush=True)
            
            if not all_records:
                print("⚠️  無資料可同步（可能是非交易日）")
                print("✅ 測試完成（無資料更新）")
                sys.exit(0)
            
            print()
            print(f"📦 準備同步 {len(all_records)} 筆資料到 Neon 資料庫...")
            
            execute_values(
                cur,
                """
                INSERT INTO stock_prices 
                (symbol, date, open_price, high_price, low_price, 
                 close_price, volume, transaction_count)
                VALUES %s
                ON CONFLICT (symbol, date) 
                DO UPDATE SET
                    open_price = EXCLUDED.open_price,
                    high_price = EXCLUDED.high_price,
                    low_price = EXCLUDED.low_price,
                    close_price = EXCLUDED.close_price,
                    volume = EXCLUDED.volume,
                    transaction_count = EXCLUDED.transaction_count
                """,
                all_records
            )
            
            conn.commit()
            
            print(f"✅ 成功同步 {len(all_records)} 筆資料到 Neon")
            print()
            print("=" * 80)
            print("🎉 測試完成！")
            print("=" * 80)
            
        except Exception as e:
            print(f"❌ 執行過程發生錯誤：{e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
            
        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()
        PYTHON_SCRIPT
